package com.kostApp.kostApp.services;


import com.kostApp.kostApp.models.Discussion;
import com.kostApp.kostApp.models.User;
import com.kostApp.kostApp.repositories.DiscussionRepository;
import com.kostApp.kostApp.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@Service
public class DiscussionService {

    private JdbcTemplate jdbcTemplate;

    private UserRepository userRepository;

    private DiscussionRepository discussionRepository;

    @Autowired
    public DiscussionService(JdbcTemplate jdbcTemplate, DiscussionRepository discussionRepository, UserRepository userRepository) {
        this.jdbcTemplate = jdbcTemplate;
        this.discussionRepository = discussionRepository;
        this.userRepository = userRepository;
    }
    public Discussion save(Discussion discussion){

        String nameOfTable = discussion.getName() + "_messages";
        String SQL = "CREATE TABLE " + nameOfTable+"(\n" +
                "    id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ,\n" +
                "    discussion_id int NOT NULL REFERENCES discussions(id),\n" +
                "    message varchar ,\n" +
                "    created_at TIMESTAMP\n" +
                ")";

        jdbcTemplate.execute(SQL);

        final String currentUserNik = SecurityContextHolder.getContext().getAuthentication().getName();
        Optional<User> optionalUser = userRepository.findByNik(currentUserNik);
        User user = null;
        if(optionalUser.isPresent()){
            user = optionalUser.get();
        }else {
            throw new RuntimeException("Cannot save user to discussion in discussion service method \"save\"");
        }

        discussion.setUser(user);
        discussionRepository.save(discussion);

        return discussion;
    }

    public Discussion getDiscussionById(int id){

        Optional<Discussion> optionalDiscussion = discussionRepository.findById(id);

        if(optionalDiscussion.isEmpty()){
            throw new RuntimeException("discussion with this id did not found ");
        }

        return optionalDiscussion.get();
    }

    public List<Discussion> getAllDiscussions(){
        return discussionRepository.findAll();
    }

    public void deleteById(int id){

//     find user by forin key end check if it his discussion
       Optional<Discussion> optionalDiscussion = discussionRepository.findById(id);
       Discussion discussion = optionalDiscussion.get();
       int userId = discussion.getUserId();
       Optional<User> optionalUser = userRepository.findById(userId);
       User user = optionalUser.get();
       final String currentUserNik = SecurityContextHolder.getContext().getAuthentication().getName();

        String nameOfTable = discussion.getName() + "_messages";
        String SQL = "DROP TABLE " + nameOfTable;
        jdbcTemplate.execute(SQL);

       if(user.getNik().equals(currentUserNik)){
           discussionRepository.deleteById(id);
       }else {
           throw new RuntimeException("you can`t delete discussion");
       }
    }


    class DiscussionMapper implements RowMapper<Discussion>{

        @Override
        public Discussion mapRow(ResultSet rs, int rowNum) throws SQLException {
            Discussion discussion = new Discussion();

            discussion.setId(rs.getInt("id"));
            discussion.setUserId(rs.getInt("user_id"));
            discussion.setName(rs.getString("name"));

            return discussion;
        }
    }
}
